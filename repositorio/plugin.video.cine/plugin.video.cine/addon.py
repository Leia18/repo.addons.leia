import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys , os , re , unicodedata
import xbmcgui
import xbmcplugin
import xbmcaddon
import urllib , urllib2
import urlparse
from urlparse import parse_qsl
import sqlite3 , base64 , zlib
from urllib2 import HTTPError
if 64 - 64: i11iIiiIii
def OO0o ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 81 - 81: Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o
def ii11i ( ) :
 import xbmc
 oOooOoO0Oo0O = xbmc . Keyboard ( "" )
 oOooOoO0Oo0O . doModal ( )
 iI1 = ''
 if ( oOooOoO0Oo0O . isConfirmed ( ) ) :
  iI1 = oOooOoO0Oo0O . getText ( )
 return iI1
 if 43 - 43: I11i11Ii
oO00oOo = xbmcaddon . Addon ( )
OOOo0 = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
Oooo000o = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
IiIi11iIIi1Ii = os . path . join ( OOOo0 , "resources/media/" )
Oo0O = '%s/thebas.tmp' % Oooo000o
IiI = '%s/rkobas.tmp' % Oooo000o
if not os . path . exists ( Oooo000o ) :
 try :
  os . makedirs ( Oooo000o )
 except : pass
ooOo = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
Oo = sys . argv [ 0 ]
o0O = int ( sys . argv [ 1 ] )
IiiIII111iI = ''
IiII = base64 . b64decode ( 'aHR0cDovL3d3dy5hZGRvbmNpbmUuY2xvdWQv' )
if 28 - 28: Ii11111i * iiI1i1
def i1I1ii1II1iII ( ) :
 if 86 - 86: oO0o
 if 12 - 12: OOO0o0o / o0oO0 + i111I * O0Oo0oO0o . II1iI . i1iIii1Ii1II
 i1I1Iiii1111 = [ ]
 i1I1Iiii1111 . append ( { 'title' : 'Géneros' , 'action' : 'genero' , 'ico' : 'gen' } )
 i1I1Iiii1111 . append ( { 'title' : 'Temas' , 'action' : 'tema' , 'ico' : 'tem' } )
 i1I1Iiii1111 . append ( { 'title' : 'Años' , 'action' : 'anno' , 'ico' : 'ann' } )
 i1I1Iiii1111 . append ( { 'title' : 'Grupos' , 'action' : 'grupo' , 'ico' : 'gru' } )
 i1I1Iiii1111 . append ( { 'title' : 'Países' , 'action' : 'pais' , 'ico' : 'gru' } )
 i1I1Iiii1111 . append ( { 'title' : 'Buscar por título' , 'action' : 'bustit' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Buscar por director' , 'action' : 'busdir' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Buscar por actor' , 'action' : 'busact' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Buscar por grupo' , 'action' : 'busgru' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Top' , 'action' : 'peltop' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Últimas 2017-2018' , 'action' : 'ultim' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Últimas hasta 2016' , 'action' : 'ultim2' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Últimas 100 HD' , 'action' : 'ulthd' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Las 100 más vistas' , 'action' : 'mvtas' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Ver peli recomendada' , 'action' : 'pelrec' , 'ico' : 'bus' } )
 return i1I1Iiii1111
 if 22 - 22: OOo000 . O0
def I11i1i11i1I ( url , post = None , txheaders = None ) :
 if txheaders == None :
  txheaders = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( url , post , txheaders )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 iiiI11 = oO000OoOoo00o . read ( )
 return iiiI11
 if 91 - 91: oOOOO / i1iiIII111ii + ii1I . oO0o
oOo0Oo = [
 [ '%s.0' % o0oOo0Ooo0O for o0oOo0Ooo0O in xrange ( 18 , 50 ) ] ,
 [ '37.0.2062.103' , '37.0.2062.120' , '37.0.2062.124' , '38.0.2125.101' , '38.0.2125.104' , '38.0.2125.111' , '39.0.2171.71' , '39.0.2171.95' , '39.0.2171.99' , '40.0.2214.93' , '40.0.2214.111' ,
 '40.0.2214.115' , '42.0.2311.90' , '42.0.2311.135' , '42.0.2311.152' , '43.0.2357.81' , '43.0.2357.124' , '44.0.2403.155' , '44.0.2403.157' , '45.0.2454.101' , '45.0.2454.85' , '46.0.2490.71' ,
 '46.0.2490.80' , '46.0.2490.86' , '47.0.2526.73' , '47.0.2526.80' , '48.0.2564.116' , '49.0.2623.112' , '50.0.2661.86' ] ,
 [ '11.0' ] ,
 [ '8.0' , '9.0' , '10.0' , '10.6' ] ]
OO00O0O0O00Oo = [ 'Windows NT 10.0' , 'Windows NT 7.0' , 'Windows NT 6.3' , 'Windows NT 6.2' , 'Windows NT 6.1' , 'Windows NT 6.0' , 'Windows NT 5.1' , 'Windows NT 5.0' ]
IIIiiiiiIii = [ '; WOW64' , '; Win64; IA64' , '; Win64; x64' , '' ]
OO = [ 'Mozilla/5.0 ({win_ver}{feature}; rv:{br_ver}) Gecko/20100101 Firefox/{br_ver}' ,
 'Mozilla/5.0 ({win_ver}{feature}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{br_ver} Safari/537.36' ,
 'Mozilla/5.0 ({win_ver}{feature}; Trident/7.0; rv:{br_ver}) like Gecko' ,
 'Mozilla/5.0 (compatible; MSIE {br_ver}; {win_ver}{feature}; Trident/6.0)' ]
if 55 - 55: iiI1i1 / o0oO0 * O0Oo0oO0o
def OoO000 ( ) :
 import random
 IIiiIiI1 = random . randrange ( len ( OO ) )
 iiIiIIi = { 'win_ver' : random . choice ( OO00O0O0O00Oo ) , 'feature' : random . choice ( IIIiiiiiIii ) , 'br_ver' : random . choice ( oOo0Oo [ IIiiIiI1 ] ) }
 ooOoo0O = OO [ IIiiIiI1 ] . format ( ** iiIiIIi )
 return ooOoo0O
 if 76 - 76: Iii1I1 / OOO0o0o . I11i11Ii * i1iIii1Ii1II - O0Oo0oO0o
def Oooo ( headers ) :
 return '|%s' % '&' . join ( [ '%s=%s' % ( O00o , urllib . quote_plus ( headers [ O00o ] ) ) for O00o in headers ] )
 if 61 - 61: OOo000 . OO0O0O * I11i11Ii . i1iiIII111ii % Ii11111i
 if 72 - 72: O0Oo0oO0o
def o0Oo00OOOOO ( string ) :
 O00o = 'sYti87g4Ut0_z'
 string = base64 . urlsafe_b64decode ( string )
 O0O = [ ]
 for o0oOo0Ooo0O in xrange ( len ( string ) ) :
  O00o0OO = O00o [ o0oOo0Ooo0O % len ( O00o ) ]
  I11i1 = chr ( ord ( string [ o0oOo0Ooo0O ] ) - ord ( O00o0OO ) % 256 )
  O0O . append ( I11i1 )
 iIi1ii1I1 = "" . join ( O0O )
 return iIi1ii1I1
 if 71 - 71: oOOOO . Iii1I1
def o0OO0oo0oOO ( user , cole , peli ) :
 return oo0oooooO0 ( 'diskokosmiko.mx' , user , cole , peli )
 if 19 - 19: II1iI + i1iiIII111ii
 if 53 - 53: iiiii . ii1I
 if 18 - 18: OOO0o0o
 I1i1I1II = 'http://diskokosmiko.mx'
 i1 = peli
 IiIiiI = '%s/-%s/p,%s,list,1,3.avi' % ( user , cole , peli )
 I1I = '%s/%s/' % ( I1i1I1II , user )
 oOO00oOO = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 OoOo = '%s/%s' % ( I1i1I1II , IiIiiI )
 oOO00oOO [ 'referer' ] = I1I
 oOO00oOO [ 'connection' ] = 'keep-alive'
 oo0ooO0oOOOOo = urllib2 . Request ( OoOo , None , oOO00oOO )
 oO000OoOoo00o = urllib2 . urlopen ( oo0ooO0oOOOOo )
 iiiI11 = oO000OoOoo00o . read ( )
 oO000OoOoo00o . close ( )
 iI = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % peli , iiiI11 )
 o00O = 0
 try :
  iI = iI [ 0 ]
 except :
  o00O = 1
 if o00O == 0 :
  OOO0OOO00oo = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( I1i1I1II , i1 )
  Iii111II = 'fileId=%s&__RequestVerificationToken=%s' % ( i1 , iI )
  oOO00oOO [ 'referer' ] = OoOo
  oOO00oOO [ 'connection' ] = 'keep-alive'
  oo0ooO0oOOOOo = urllib2 . Request ( OOO0OOO00oo , Iii111II , oOO00oOO )
  try :
   oO000OoOoo00o = urllib2 . urlopen ( oo0ooO0oOOOOo )
   iiiI11 = oO000OoOoo00o . read ( )
   oO000OoOoo00o . close ( )
   iiii11I = re . findall ( 'DownloadUrl":"([^"]+)' , iiiI11 )
   Ooo0OO0oOO = iiii11I [ 0 ]
  except :
   Ooo0OO0oOO = 'tmp'
 else :
  Ooo0OO0oOO = ''
 return Ooo0OO0oOO . strip ( )
 if 50 - 50: I11i11Ii
def oo0oooooO0 ( server , user , cole , peli ) :
 Ii1i11IIii1I = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 Iii111II = None
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( Ii1i11IIii1I , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 O0o0Ooo = oO000OoOoo00o . info ( ) [ 'Set-Cookie' ]
 iiiI11 = oO000OoOoo00o . read ( )
 O00 = re . search ( 'action="(\/action\/DownloadFile\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , iiiI11 )
 iI1Ii11iII1 = 'http://%s%s' % ( server , O00 . group ( 1 ) . replace ( '&amp;' , '&' ) )
 iI = O00 . group ( 2 )
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Referer' ] = Ii1i11IIii1I
 OOOoO0O0o [ 'Cookie' ] = O0o0Ooo
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 Iii111II = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , iI )
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( iI1Ii11iII1 , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 iiiI11 = oO000OoOoo00o . read ( )
 import time
 Oo0O0O0ooO0O = str ( int ( time . time ( ) ) ) + '404'
 OoOo = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , Oo0O0O0ooO0O )
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Referer' ] = Ii1i11IIii1I
 OOOoO0O0o [ 'Cookie' ] = O0o0Ooo
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 Iii111II = None
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( OoOo , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 IIIIii = oO000OoOoo00o . info ( ) [ 'Set-Cookie' ]
 iiiI11 = oO000OoOoo00o . read ( )
 O0o0 = O0o0Ooo . split ( ';' )
 OO00Oo = IIIIii . split ( ';' )
 for O0OOO0OOoO0O in OO00Oo :
  if O0OOO0OOoO0O not in O0o0 :
   O0o0 . append ( O0OOO0OOoO0O )
 OO00Oo = [ ]
 for O0OOO0OOoO0O in O0o0 :
  if 'path=/' not in O0OOO0OOoO0O and 'HttpOnly' not in O0OOO0OOoO0O :
   OO00Oo . append ( O0OOO0OOoO0O )
 O0o0Ooo = '; ' . join ( OO00Oo ) . replace ( '  ' , ' ' )
 OOO0OOO00oo = 'http://%s/action/Account/Login' % server
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Accept' ] = '*/*'
 OOOoO0O0o [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 OOOoO0O0o [ 'Accept-Encoding' ] = 'gzip, deflate'
 OOOoO0O0o [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 OOOoO0O0o [ 'X-Requested-With' ] = 'XMLHttpRequest'
 OOOoO0O0o [ 'Referer' ] = Ii1i11IIii1I
 OOOoO0O0o [ 'Cookie' ] = O0o0Ooo
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 O00Oo000ooO0 = I11i1i11i1I ( '%s/bas/doclv.php' % IiII )
 O00Oo000ooO0 = O00Oo000ooO0 . split ( '-' )
 if 100 - 100: Iii1I1 + O0 - O0Oo0oO0o + i11iIiiIii * i1iIii1Ii1II
 Iii111II = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( iI , O00Oo000ooO0 [ 0 ] , O00Oo000ooO0 [ 1 ] )
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( OOO0OOO00oo , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 IIIIii = oO000OoOoo00o . info ( ) [ 'Set-Cookie' ]
 iiiI11 = oO000OoOoo00o . read ( )
 O0o0 = O0o0Ooo . split ( ';' )
 OO00Oo = IIIIii . split ( ';' )
 for O0OOO0OOoO0O in OO00Oo :
  if O0OOO0OOoO0O not in O0o0 :
   O0o0 . append ( O0OOO0OOoO0O )
 OO00Oo = [ ]
 for O0OOO0OOoO0O in O0o0 :
  if 'path=/' not in O0OOO0OOoO0O and 'HttpOnly' not in O0OOO0OOoO0O :
   OO00Oo . append ( O0OOO0OOoO0O )
 O0o0Ooo = '; ' . join ( OO00Oo ) . replace ( '  ' , ' ' )
 IIIIii = ''
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Referer' ] = Ii1i11IIii1I
 OOOoO0O0o [ 'Cookie' ] = O0o0Ooo
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 Iii111II = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , iI )
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( iI1Ii11iII1 , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 iiiI11 = oO000OoOoo00o . read ( )
 O00 = re . search ( 'DownloadUrl":"(.*?)"' , iiiI11 )
 return O00 . group ( 1 )
 if 30 - 30: OOO0o0o . i1iIii1Ii1II - iiiii
def Ii1iIiii1 ( bas ) :
 OOO = I11i1i11i1I ( '%sbas/base.enl' % IiII )
 OOO = OOO . split ( '.' )
 Oo0oOOo = 0
 if len ( OOO ) >= 8 :
  if OOO [ 6 ] == 'gd2' :
   OOO = OOO [ 7 ] . split ( '-' )
   from datetime import datetime
   OOO = 'https://goo.gl/%s' % OOO [ datetime . now ( ) . second % len ( OOO ) ]
   try :
    iiiI11 = I11i1i11i1I ( OOO )
    Oo0OoO00oOO0o = zlib . decompress ( iiiI11 )
    Oo0oOOo = 1
   except : pass
 if ( len ( OOO ) >= 6 ) and ( Oo0oOOo == 0 ) :
  if OOO [ 4 ] == 'gd' :
   OOO = 'https://goo.gl/%s' % OOO [ 5 ]
   try :
    iiiI11 = I11i1i11i1I ( OOO )
    Oo0OoO00oOO0o = zlib . decompress ( iiiI11 )
    Oo0oOOo = 1
   except : pass
  elif OOO [ 4 ] == 'gh' :
   OOO00O = OOO [ 5 ]
   try :
    OOO = o0OO0oo0oOO ( OOO [ 1 ] , OOO [ 2 ] , OOO [ 6 ] )
    try :
     iiiI11 = I11i1i11i1I ( OOO )
    except : pass
   except : pass
   OOO = 'https://raw.githubusercontent.com/%s/base.cmp' % OOO00O
   try :
    iiiI11 = I11i1i11i1I ( OOO )
    Oo0oOOo = 1
   except : pass
 if Oo0oOOo == 0 :
  if OOO [ 0 ] == 'dk' :
   OOO = o0OO0oo0oOO ( OOO [ 1 ] , OOO [ 2 ] , OOO [ 3 ] )
  iiiI11 = I11i1i11i1I ( OOO )
 iiiI11 = zlib . decompress ( iiiI11 )
 OOoOO0oo0ooO = open ( bas , 'wb' )
 OOoOO0oo0ooO . write ( iiiI11 )
 OOoOO0oo0ooO . close ( )
 O0o0O00Oo0o0 = sqlite3 . connect ( bas )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select version from version" )
 i1Oo00 = O00O0oOO00O00 . fetchone ( )
 i1Oo00 = i1Oo00 [ 0 ]
 O00O0oOO00O00 . execute ( "select faffid from pelis where faffid>0 group by faffid;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 iiI111I1iIiI = len ( i1i )
 O00O0oOO00O00 . execute ( "select faffid from pelis where faffid<0;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 iiI111I1iIiI += len ( i1i )
 O0o0O00Oo0o0 . close ( )
 II = 'Vers. %s (%s películas distintas)' % ( i1Oo00 , iiI111I1iIiI )
 xbmcgui . Dialog ( ) . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
 try :
  II = I11i1i11i1I ( '%s/bas/domsg.php' % IiII )
  if II != '' :
   xbmcgui . Dialog ( ) . ok ( 'Addon Cine' , II )
 except : pass
 from uuid import getnode as get_mac
 Ii1I1IIii1II = get_mac ( )
 import hashlib
 O0ii1ii1ii = hashlib . md5 ( )
 O0ii1ii1ii . update ( str ( Ii1I1IIii1II ) )
 O0ii1ii1ii = O0ii1ii1ii . hexdigest ( )
 oooooOoo0ooo = 0
 while oooooOoo0ooo < 5 :
  try :
   Oo0OoO00oOO0o = I11i1i11i1I ( '%s/bas/dodev.php?dev=%s' % ( IiII , O0ii1ii1ii ) )
   oooooOoo0ooo = 8
  except :
   oooooOoo0ooo += 1
   if 6 - 6: II1iI - i1iIii1Ii1II + OO0O0O - oOOOO - i11iIiiIii
def OO0oOO0O ( bas ) :
 import xbmc
 oO = ''
 if os . path . isfile ( bas ) :
  try :
   O0o0O00Oo0o0 = sqlite3 . connect ( bas )
   O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
   O00O0oOO00O00 . execute ( "Select vrsp from version" )
   iIi1IIIi1 = O00O0oOO00O00 . fetchone ( )
   O0o0O00Oo0o0 . close ( )
   oO = iIi1IIIi1 [ 0 ]
  except : pass
  if 86 - 86: II1iI % oO0o / I11i11Ii / oO0o
  i1Oo00 = ''
  try :
   i1Oo00 = I11i1i11i1I ( '%sbas/base.max' % IiII )
  except : pass
  if 42 - 42: iiI1i1
  if i1Oo00 != '' :
   try :
    O0o0O00Oo0o0 = sqlite3 . connect ( bas )
    O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
    O00O0oOO00O00 . execute ( "Select version from version" )
    iIi1IIIi1 = O00O0oOO00O00 . fetchone ( )
    O0o0O00Oo0o0 . close ( )
    iIi1IIIi1 = str ( iIi1IIIi1 [ 0 ] )
    if iIi1IIIi1 != i1Oo00 :
     Ii1iIiii1 ( bas )
   except :
    Ii1iIiii1 ( bas )
 else :
  Ii1iIiii1 ( bas )
  if 67 - 67: oOOOO . OOo000 . Iii1I1
 O0o0O00Oo0o0 = sqlite3 . connect ( bas )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select vrsp,pdata from version" )
 iIi1IIIi1 = O00O0oOO00O00 . fetchone ( )
 O0o0O00Oo0o0 . close ( )
 if oO != iIi1IIIi1 [ 0 ] :
  if 10 - 10: o0oO0 % o0oO0 - OO0O0O / O0Oo0oO0o + i1iIii1Ii1II
  import xbmc , xbmcaddon
  OOOOoOoo0O0O0 = xbmcaddon . Addon ( )
  OOOo00oo0oO = xbmc . translatePath ( OOOOoOoo0O0O0 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
  IIiIi1iI = iIi1IIIi1 [ 1 ] . split ( '\n' )
  iiiI11 = base64 . b64decode ( IIiIi1iI [ 0 ] )
  iiiI11 = zlib . decompress ( iiiI11 )
  if not os . path . isfile ( '%s/noactualizar.txt' % OOOo00oo0oO ) :
   OOoOO0oo0ooO = open ( '%s/addon.py' % ( OOOo00oo0oO ) , 'wb' )
   OOoOO0oo0ooO . write ( iiiI11 )
   OOoOO0oo0ooO . close ( )
   iiiI11 = base64 . b64decode ( IIiIi1iI [ 1 ] )
   iiiI11 = zlib . decompress ( iiiI11 )
   OOoOO0oo0ooO = open ( '%s/addon.xml' % ( OOOo00oo0oO ) , 'wb' )
   OOoOO0oo0ooO . write ( iiiI11 )
   OOoOO0oo0ooO . close ( )
   if 35 - 35: i1iIii1Ii1II % Iii1I1 - Iii1I1
def IiIIIi1iIi ( server , user , cole , peli , last ) :
 last = base64 . b64decode ( last )
 user = o0Oo00OOOOO ( user )
 peli = o0Oo00OOOOO ( peli )
 if server == 'sc' :
  ooOOoooooo = peli . split ( ' ' )
  II1I = base64 . b64decode ( 'aHR0cDovL3N0cmVhbWNsb3VkLmV1Lw==' ) + ooOOoooooo [ 0 ]
 elif server == 'dk' :
  server = base64 . b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' )
  II1I = '%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 O0i1II1Iiii1I11 = base64 . b64decode ( 'c291cmNl' )
 IIII = base64 . b64decode ( 'aHR0cDovL2FkZG9uLmNpbmUva29kaQ==' )
 iiIiI = base64 . b64decode ( 'dXJscw==' )
 o00oooO0Oo = base64 . b64decode ( 'c3VibWl0' )
 o0O0OOO0Ooo = base64 . b64decode ( 'bG9xdWVz' )
 iiIiII1 = base64 . b64decode ( 'aHR0cDovLzEyNy4wLjAuMTo5NjY2L2ZsYXNoL2FkZA==' )
 OOO00O0O = { O0i1II1Iiii1I11 : IIII , iiIiI : II1I , o00oooO0Oo : o0O0OOO0Ooo }
 if 33 - 33: Iii1I1 . O0 . I11i11Ii
 OoOO = urllib2 . HTTPHandler ( )
 ooOOO0 = urllib2 . build_opener ( OoOO )
 iiiI11 = urllib . urlencode ( OOO00O0O )
 o0o = urllib2 . Request ( iiIiII1 , data = iiiI11 )
 O0OOoO00OO0o = ooOOO0 . open ( o0o )
 II = 'Link copiado a JDownloader'
 xbmcgui . Dialog ( ) . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
 xbmcplugin . endOfDirectory ( o0O )
 if 38 - 38: O0Oo0oO0o % II1iI % OOO0o0o % iiI1i1 - Ii11111i
def i1Ii ( s ) :
 return base64 . urlsafe_b64encode ( s )
 if 14 - 14: OOo000
def I1iI1iIi111i ( ) :
 iiIi1IIi1I = ''
 if 84 - 84: i1iiIII111ii * ooO0OO000o + Ii11111i
 O0ooO0Oo00o = base64 . b64decode ( 'IzAzIzQzIzI1IzE3' )
 if 77 - 77: OO0O0O * iiI1i1
 if 95 - 95: I11i11Ii + i11iIiiIii
 I1I = base64 . b64decode ( 'aHR0cDovL3d3dy5jdWFsZXNtaWlwLmNvbS8=' )
 oo0ooO0oOOOOo = I11i1i11i1I ( I1I , None )
 I1Ii = re . search ( '<b>Tu IP real es (.*?)<b' , oo0ooO0oOOOOo )
 if I1Ii :
  I1Ii = I1Ii . group ( 1 )
  if 94 - 94: i1iIii1Ii1II - ooO0OO000o . O0Oo0oO0o % II1iI . i11iIiiIii + Iii1I1
  I1I = base64 . b64decode ( 'aHR0cHM6Ly9nZW9pcHRvb2wuY29tL2VzLz9pcD0=' ) + I1Ii
  oo0ooO0oOOOOo = I11i1i11i1I ( I1I , None )
  if 26 - 26: II1iI - OO0O0O - I11i11Ii / iiI1i1 . oO0o % OO0O0O
  OOiIiIIi1 = re . search ( base64 . b64decode ( 'UG9zdGFsOltcc1xTXSo/PHNwYW4+KC4qPyk8' ) , oo0ooO0oOOOOo )
  if OOiIiIIi1 :
   OOiIiIIi1 = OOiIiIIi1 . group ( 1 )
   iiIi1IIi1I = '#' + OOiIiIIi1 [ : 2 ]
 iiIi1IIi1I = iiIi1IIi1I in O0ooO0Oo00o
 return iiIi1IIi1I
 if 7 - 7: i1iiIII111ii - Ii11111i - i111I + i1iiIII111ii
def iI1I11iiI1i ( encoded , code ) :
 oO0o0Ooooo = ""
 OOo0oO00ooO00 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
 OOo0oO00ooO00 = OOo0oO00ooO00 [ : : - 1 ]
 oOO0O00oO0Ooo = 0
 for IIiiIiI1 in range ( 0 , len ( encoded ) - 1 ) :
  while oOO0O00oO0Ooo <= len ( encoded ) - 1 :
   oO0Oo0O0o = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo ] )
   OOI1iI1ii1II = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 1 ] )
   O0O0OOOOoo = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 2 ] )
   oOooO0 = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 3 ] )
   oOO0O00oO0Ooo += 4
   Ii1I1Ii = ( ( oO0Oo0O0o << 2 ) | ( OOI1iI1ii1II >> 4 ) )
   OOoO0 = ( ( ( OOI1iI1ii1II & 15 ) << 4 ) | ( O0O0OOOOoo >> 2 ) )
   OO0Oooo0oOO0O = ( ( O0O0OOOOoo & 3 ) << 6 ) | oOooO0
   Ii1I1Ii = Ii1I1Ii ^ code
   oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( Ii1I1Ii )
   if O0O0OOOOoo != 64 :
    oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( OOoO0 )
   if O0O0OOOOoo != 64 :
    oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( OO0Oooo0oOO0O )
 return oO0o0Ooooo
 if 62 - 62: I11i11Ii
def O00o0OO0 ( server , user , cole , pel , pid , tit ) :
 o0O = int ( sys . argv [ 1 ] )
 if 35 - 35: i111I % i1iiIII111ii / oOOOO + OO0O0O . iiiii . I11i11Ii
 OO0oOO0O ( Oo0O )
 if 71 - 71: O0 * ooO0OO000o * i111I
 oOOo0 = server . split ( '_' )
 server = oOOo0 [ 0 ]
 if len ( oOOo0 ) > 1 :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  O00O0oOO00O00 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
  O0o0O00Oo0o0 . commit ( )
  II1I1iiIII = oOOo0 [ 1 ] . split ( '.' )
  for oOOo0O00o in II1I1iiIII :
   O00O0oOO00O00 . execute ( 'INSERT INTO reco(idpel) VALUES (?);' , ( oOOo0O00o , ) )
  O0o0O00Oo0o0 . commit ( )
  O0o0O00Oo0o0 . close ( )
 tit = base64 . urlsafe_b64decode ( tit )
 user = o0Oo00OOOOO ( user )
 pel = o0Oo00OOOOO ( pel )
 cole = o0Oo00OOOOO ( cole )
 if 8 - 8: iiI1i1
 if 49 - 49: I11i11Ii - II1iI
 if 74 - 74: OO0O0O * o0oO0 + oO0o / ii1I / ooO0OO000o . Ii11111i
 if 62 - 62: iiiii * I11i11Ii
 if 58 - 58: oO0o % OOO0o0o
 if 50 - 50: oOOOO . OOO0o0o
 if 97 - 97: Iii1I1 + oO0o
 if 89 - 89: OOO0o0o + iiI1i1 * II1iI * i1iIii1Ii1II
 if 37 - 37: iiiii - Iii1I1 - OOO0o0o
 if 77 - 77: O0Oo0oO0o * OO0O0O
 if 98 - 98: I11i11Ii % i1iIii1Ii1II * iiiii
 try :
  I1I = '%sbas/doseek.php?id=%s' % ( IiII , pid )
  Oo0OoO00oOO0o = I11i1i11i1I ( I1I )
 except : pass
 if 51 - 51: OO0O0O . oO0o / i111I + OOO0o0o
 if server == 'kb' :
  Ooo0OO0oOO = oo0oooooO0 ( 'kbagi.com' , user , cole , pel )
  I11 = xbmcgui . ListItem ( path = Ooo0OO0oOO . strip ( ) )
  iI1i1I11I11 ( I11 , tit , pid )
  xbmcplugin . setResolvedUrl ( o0O , True , I11 )
 elif server == 'dk' :
  Ooo0OO0oOO = o0OO0oo0oOO ( user , cole , pel )
  if Ooo0OO0oOO == '' :
   try :
    I1I = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
    Oo0OoO00oOO0o = I11i1i11i1I ( I1I )
   except : pass
   II = 'La película ya no existe'
   I11 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , I11 )
   o000O0O = xbmcgui . Dialog ( )
   o000O0O . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
  if Ooo0OO0oOO == 'tmp' :
   II = 'Servidor temporalmente caído'
   I11 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , I11 )
   o000O0O = xbmcgui . Dialog ( )
   o000O0O . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   I11 = xbmcgui . ListItem ( path = Ooo0OO0oOO . strip ( ) )
   iI1i1I11I11 ( I11 , tit , pid )
   xbmcplugin . setResolvedUrl ( o0O , True , I11 )
 elif server == 'sc' :
  iiIiII1 = 'sg'
  I1i1i1iii = pel . split ( ' ' )
  I1111i = pel . split ( ' ' )
  if 14 - 14: O0Oo0oO0o / OOO0o0o
  if 32 - 32: I11i11Ii * Ii11111i
  import datetime
  O0OooOo0o = datetime . datetime . today ( ) . weekday ( )
  for iiI11ii1I1 in range ( O0OooOo0o ) :
   I1i1i1iii . append ( I1i1i1iii . pop ( 0 ) )
   I1111i . append ( I1111i . pop ( 0 ) )
   if 82 - 82: ooO0OO000o % II1iI / iiI1i1 + oO0o / OOO0o0o / oOOOO
  while 1 == 1 :
   if not I1111i :
    II = 'Película en preparación'
    I11 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , I11 )
    o000O0O = xbmcgui . Dialog ( )
    o000O0O . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   for oOo0OOoO0 in I1i1i1iii :
    I1111i . remove ( oOo0OOoO0 )
    if len ( oOo0OOoO0 ) == 12 :
     iiIiII1 = 'sc'
     I1I = 'http://streamcloud.eu/%s' % oOo0OOoO0
     iiiI11 = ''
     try :
      iiiI11 = I11i1i11i1I ( I1I )
      if ( "<h1>File Not Found</h1>" in iiiI11 ) or ( "<h1>Archivo no encontrado</h1>" in iiiI11 ) or ( iiiI11 == 'Not Found' ) :
       iiiI11 = ''
      else :
       if iiiI11 != '' : break
       if 11 - 11: o0oO0 . iiI1i1 * O0 * iiiii + i1iiIII111ii
     except :
      II = 'El servidor StreamCloud parece caído, prueba más tarde.'
      I11 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
      xbmcplugin . setResolvedUrl ( o0O , False , I11 )
      o000O0O = xbmcgui . Dialog ( )
      o000O0O . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
      iiiI11 = 'bye'
      break
    elif len ( oOo0OOoO0 ) == 16 :
     iiIiII1 = 'sg'
     I1I = 'https://streamango.com/embed/%s' % oOo0OOoO0
     IiII111i1i11 = { 'User-Agent' : OoO000 ( ) }
     iiiI11 = I11i1i11i1I ( I1I , txheaders = IiII111i1i11 )
     if ( '>Sorry!<' in iiiI11 ) :
      iiiI11 = ''
     else :
      if iiiI11 != '' : break
   I1i1i1iii = I1111i
   if iiiI11 == '' :
    try :
     I1I = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
     Oo0OoO00oOO0o = I11i1i11i1I ( I1I )
    except : pass
    II = 'La película ya no existe'
    I11 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , I11 )
    o000O0O = xbmcgui . Dialog ( )
    o000O0O . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   elif iiiI11 == 'bye' :
    break
   if iiIiII1 == 'sc' :
    Ooo0OO0oOO = re . findall ( 'file\: "([^"]+)"' , iiiI11 , flags = re . DOTALL )
    if not Ooo0OO0oOO :
     Iii111II = ""
     i111iIi1i1II1 = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , iiiI11 , flags = re . DOTALL )
     for oooO , i1I1i111Ii in i111iIi1i1II1 :
      Iii111II += oooO + "=" + i1I1i111Ii + "&"
     Iii111II = Iii111II . replace ( "op=download1" , "op=download2" )
     iiiI11 = I11i1i11i1I ( I1I , post = Iii111II )
     if 'id="justanotice"' in iiiI11 :
      return [ ]
     Ooo0OO0oOO = re . findall ( 'file\: "([^"]+)"' , iiiI11 , flags = re . DOTALL )
    try :
     Ooo0OO0oOO = Ooo0OO0oOO [ 0 ]
     I11 = xbmcgui . ListItem ( path = Ooo0OO0oOO )
     iI1i1I11I11 ( I11 , tit , pid )
     xbmcplugin . setResolvedUrl ( o0O , True , I11 )
     break
    except :
     pass
   elif iiIiII1 == 'sg' :
    if 67 - 67: I11i11Ii . ii1I
    i1i1iI1iiiI = re . search ( '''srces\.push\([\S\s*]{type:"video/mp4",src:\w+\('([^']+)',(\d+)''' , iiiI11 )
    if i1i1iI1iiiI :
     Ooo0oOooo0 = iI1I11iiI1i ( i1i1iI1iiiI . group ( 1 ) , int ( i1i1iI1iiiI . group ( 2 ) ) )
     if Ooo0oOooo0 :
      Ooo0oOooo0 = "http:%s" % Ooo0oOooo0 if Ooo0oOooo0 . startswith ( "//" ) else Ooo0oOooo0
      Ooo0oOooo0 = Ooo0oOooo0 . split ( "/" )
      if not Ooo0oOooo0 [ - 1 ] . isdigit ( ) :
       Ooo0oOooo0 [ - 1 ] = re . sub ( '[^\d]' , '' , Ooo0oOooo0 [ - 1 ] )
      Ooo0oOooo0 = "/" . join ( Ooo0oOooo0 )
      IiII111i1i11 . update ( { 'Referer' : I1I } )
      Ooo0OO0oOO = Ooo0oOooo0 + Oooo ( IiII111i1i11 )
      import xbmc
      xbmc . log ( 'JJSG = ' + Ooo0OO0oOO )
      try :
       I11 = xbmcgui . ListItem ( path = Ooo0OO0oOO )
       iI1i1I11I11 ( I11 , tit , pid )
       xbmcplugin . setResolvedUrl ( o0O , True , I11 )
       break
      except :
       pass
       if 61 - 61: oO0o - O0Oo0oO0o - ii1I
def IiI1iIiIIIii ( ) :
 OO0oOO0O ( Oo0O )
 i1I1Iiii1111 = i1I1ii1II1iII ( )
 oOoO = [ ]
 for oOoO00O0 in i1I1Iiii1111 :
  OOIi1iI111II1I1 = '%s/%s.png' % ( IiIi11iIIi1Ii , oOoO00O0 [ 'ico' ] )
  oOOOOoOO0o = xbmcgui . ListItem ( label = oOoO00O0 [ 'title' ] , iconImage = OOIi1iI111II1I1 )
  I1I = '{0}?action={1}' . format ( Oo , oOoO00O0 [ 'action' ] )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 25 - 25: oOOOO / OO0O0O % OOo000
 if 42 - 42: i11iIiiIii * OO0O0O / o0oO0 . i11iIiiIii % II1iI
 if 41 - 41: O0 / Iii1I1
 if 51 - 51: II1iI % I11i11Ii
 if 60 - 60: I11i11Ii / O0Oo0oO0o . I11i11Ii / oOOOO . O0
 if 92 - 92: oO0o + oOOOO * i1iIii1Ii1II % I11i11Ii
def i1I1i1 ( pid , cur ) :
 O0OoooO0 = ''
 cur . execute ( "SELECT genero FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen where pelgen.idpel=? ORDER BY pelgen.id" , ( pid , ) )
 i1i = cur . fetchall ( )
 if i1i :
  ooo0O0o00O = [ ]
  for iIi1IIIi1 in i1i :
   ooo0O0o00O . append ( iIi1IIIi1 [ 0 ] )
  O0OoooO0 = ', ' . join ( ooo0O0o00O )
 return O0OoooO0
 if 48 - 48: i1iiIII111ii / oOOOO . OO0O0O * oO0o * i111I / ii1I
def OOOOoOOo0O0 ( pid , cur ) :
 oOooo0 = [ ]
 cur . execute ( "SELECT actor FROM actores INNER JOIN pelact ON actores.id = pelact.idact where pelact.idpel=? ORDER BY pelact.id" , ( pid , ) )
 i1i = cur . fetchall ( )
 if i1i :
  for iIi1IIIi1 in i1i :
   oOooo0 . append ( iIi1IIIi1 [ 0 ] )
 return oOooo0
 if 58 - 58: I11i11Ii . OOo000 + oO0o
def O00OO ( cur , row , listitem , tit ) :
 I1I1 = row [ 0 ]
 OoO0O0o0oOOO = row [ 7 ]
 OOoOoOo = row [ 8 ]
 o000ooooO0o = row [ 9 ]
 iI1i11 = row [ 12 ]
 OoOOoooOO0O = row [ 15 ]
 O0OoooO0 = i1I1i1 ( I1I1 , cur )
 ooo00Ooo = OOOOoOOo0O0 ( I1I1 , cur )
 if 93 - 93: i11iIiiIii - I11i11Ii * o0oO0 * II1iI % Iii1I1 + iiiii
 listitem . setInfo ( 'video' , { 'title' : tit , 'year' : OOoOoOo , 'director' : iI1i11 , 'plot' : o000ooooO0o , 'genre' : O0OoooO0 , 'cast' : ooo00Ooo , 'rating' : OoOOoooOO0O } )
 if 25 - 25: O0 + i1iIii1Ii1II / i1iiIII111ii . OOO0o0o % Iii1I1 * iiI1i1
def iI1i1I11I11 ( listitem , tit , pid ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis WHERE pelis.id=?;" , ( pid , ) )
 iIi1IIIi1 = O00O0oOO00O00 . fetchone ( )
 O00OO ( O00O0oOO00O00 , iIi1IIIi1 , listitem , tit )
 O0o0O00Oo0o0 . close ( )
 if 84 - 84: i1iiIII111ii % i1iIii1Ii1II + i11iIiiIii
def II1I1Ii ( rows = [ ] , tipo2 = False , zid = '' , nota = False , mvta = False ) :
 try :
  xbmcplugin . setContent ( o0O , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except : pass
 if 62 - 62: Iii1I1 % II1iI . II1iI - OO0O0O / i11iIiiIii
 if 31 - 31: OO0O0O / iiI1i1 / o0oO0
 if 41 - 41: Ii11111i
 if 10 - 10: Ii11111i / Ii11111i / oOOOO . oOOOO
 if 98 - 98: Ii11111i / I11i11Ii . Iii1I1 + iiI1i1
 if 43 - 43: ooO0OO000o . i111I / o0oO0
 if 20 - 20: I11i11Ii
 if 95 - 95: OOo000 - I11i11Ii
 if 34 - 34: i1iiIII111ii * I11i11Ii . ii1I * i1iiIII111ii / i1iiIII111ii
 if 30 - 30: o0oO0 + Ii11111i / Ii11111i % o0oO0 . o0oO0
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 if 55 - 55: i1iiIII111ii - II1iI + ooO0OO000o + OOo000 % i1iIii1Ii1II
 oOoO = [ ]
 iiI11i1II = 0
 OO0O0OOo0O = 0
 for iIi1IIIi1 in rows :
  I1I1 = iIi1IIIi1 [ 0 ]
  iiIiII1 = iIi1IIIi1 [ 1 ]
  I1 = iIi1IIIi1 [ 2 ]
  o0OooOOOOOO = iIi1IIIi1 [ 3 ]
  ooOOoooooo = iIi1IIIi1 [ 4 ]
  OOooO0o0 = iIi1IIIi1 [ 5 ]
  iiIII1i = iIi1IIIi1 [ 6 ]
  I1IooooO0oOoOOoO = iIi1IIIi1 [ 7 ]
  OOoOoOo = iIi1IIIi1 [ 8 ]
  o000ooooO0o = iIi1IIIi1 [ 9 ]
  I1i11i = iIi1IIIi1 [ 11 ]
  iI1i11 = iIi1IIIi1 [ 12 ]
  OoOOoooOO0O = iIi1IIIi1 [ 15 ]
  IiIi = iIi1IIIi1 [ 21 ]
  OOOOO0O00 = iIi1IIIi1 [ 22 ]
  O0OoooO0 = i1I1i1 ( I1I1 , O00O0oOO00O00 )
  ooo00Ooo = OOOOoOOo0O0 ( I1I1 , O00O0oOO00O00 )
  if 30 - 30: OO0O0O . I11i11Ii . O0Oo0oO0o / OOO0o0o
  if I1IooooO0oOoOOoO != OO0O0OOo0O :
   OO0O0OOo0O = I1IooooO0oOoOOoO
   iiI11i1II += 1
   if 42 - 42: Ii11111i
  II1IIiiIiI = iiIII1i
  if IiIi == None :
   IiIi = I1i11i
  else :
   if IiIi . startswith ( '/' ) :
    IiIi = 'https://image.tmdb.org/t/p/w500%s' % IiIi
  if OOOOO0O00 == None :
   OOOOO0O00 = I1i11i
  else :
   if OOOOO0O00 . startswith ( '/' ) :
    OOOOO0O00 = 'https://image.tmdb.org/t/p/original%s' % OOOOO0O00
  if OOooO0o0 == 'S' :
   if iiIiII1 == 'sc' :
    iiIII1i = '[COLOR lightskyblue]%s (HD)[/COLOR]' % iiIII1i
   else :
    iiIII1i = '[COLOR khaki]%s (HD)[/COLOR]' % iiIII1i
  if OOooO0o0 == '3D' :
   iiIII1i = '[COLOR limegreen]%s (3D)[/COLOR]' % iiIII1i
  if tipo2 :
   iiIII1i = '[COLOR orange]%s[/COLOR] %s' % ( OOoOoOo , iiIII1i )
  if nota :
   iiIII1i = '%s [COLOR blue](%s)[/COLOR]' % ( iiIII1i , OoOOoooOO0O )
  if mvta == True :
   iiIII1i = '%s. %s' % ( str ( iiI11i1II ) , iiIII1i )
  oOOOOoOO0o = xbmcgui . ListItem ( label = iiIII1i , iconImage = I1i11i )
  O00OO ( O00O0oOO00O00 , iIi1IIIi1 , oOOOOoOO0o , iiIII1i )
  oOOOOoOO0o . setArt ( { 'thumb' : IiIi , 'icon' : IiIi , 'fanart' : OOOOO0O00 } )
  oOOOOoOO0o . addStreamInfo ( 'audio' , { 'language' : 'es' } )
  oOOOOoOO0o . setProperty ( 'IsPlayable' , 'true' )
  if 1 - 1: OOo000
  if 97 - 97: O0Oo0oO0o + OOo000 + Iii1I1 + i11iIiiIii
  if 77 - 77: OOO0o0o / iiiii
  if 46 - 46: OOO0o0o % OO0O0O . OOo000 % OOo000 + i11iIiiIii
  if 72 - 72: OO0O0O * i1iIii1Ii1II % i1iiIII111ii / iiI1i1
  iiIiII1 = '%s%s' % ( iiIiII1 , zid )
  I1I = '{0}?action=play&server={1}&user={2}&cole={3}&peli={4}&id={5}&tit={6}' . format ( Oo , iiIiII1 , I1 , o0OooOOOOOO , ooOOoooooo , I1I1 , base64 . urlsafe_b64encode ( II1IIiiIiI . encode ( 'utf-8' ) ) )
  i1II1 = False
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 O0o0O00Oo0o0 . close ( )
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 35 - 35: i1iiIII111ii + ii1I % o0oO0 % II1iI + i111I
def iiiI ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT generos.id, genero, Count(idpel) FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen GROUP BY generos.genero ORDER BY genero2" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oOoO = [ ]
 for iIi1IIIi1 in i1i :
  I1ii1 = iIi1IIIi1 [ 0 ]
  ooo0O0o00O = iIi1IIIi1 [ 1 ]
  iiI111I1iIiI = iIi1IIIi1 [ 2 ]
  O00Oo0o0000OOoO = '[COLOR gold]%s[/COLOR] (%s)' % ( ooo0O0o00O , iiI111I1iIiI )
  oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
  I1I = '{0}?action=genero2&idgen={1}' . format ( Oo , I1ii1 )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 46 - 46: Iii1I1 * ooO0OO000o - Ii11111i * i1iiIII111ii
def i11IIIiIiIi ( idgen ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idgen , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , nota = True )
 if 27 - 27: o0oO0 + oO0o - O0Oo0oO0o + Iii1I1 . i1iIii1Ii1II
def iIi1i1iIi1iI ( idtem ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idtem , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , nota = True )
 if 26 - 26: iiiii * I11i11Ii + O0Oo0oO0o
def IiIii1i111 ( idgen ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idgen , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i )
 if 43 - 43: Iii1I1
def Ii1 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT temas.id, tema, Count(idpel) FROM temas INNER JOIN peltem ON temas.id = peltem.idtem GROUP BY temas.tema ORDER BY tema2" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oOoO = [ ]
 for iIi1IIIi1 in i1i :
  I1ii1 = iIi1IIIi1 [ 0 ]
  ooo0O0o00O = iIi1IIIi1 [ 1 ]
  iiI111I1iIiI = iIi1IIIi1 [ 2 ]
  O00Oo0o0000OOoO = '[COLOR gold]%s[/COLOR] (%s)' % ( ooo0O0o00O , iiI111I1iIiI )
  oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
  I1I = '{0}?action=tema2&idtem={1}' . format ( Oo , I1ii1 )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 14 - 14: OO0O0O % OO0O0O * i11iIiiIii - iiI1i1 - II1iI
def o00oo0 ( idtem ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idtem , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i )
 if 59 - 59: I11i11Ii * ooO0OO000o . Iii1I1
def O000OoOO0 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select anno,count(id) from pelis group by anno order by anno" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oOoO = [ ]
 for iIi1IIIi1 in i1i :
  i1IiIII111i1 = iIi1IIIi1 [ 0 ]
  iiI111I1iIiI = iIi1IIIi1 [ 1 ]
  O00Oo0o0000OOoO = '[COLOR gold]%s[/COLOR] (%s)' % ( i1IiIII111i1 , iiI111I1iIiI )
  oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
  I1I = '{0}?action=anno2&anno={1}' . format ( Oo , i1IiIII111i1 )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 57 - 57: i1iIii1Ii1II % i1iIii1Ii1II * i11iIiiIii
def ii ( anno ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select * from pelis where anno = ? order by grupo, hd;" , ( anno , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i )
 if 79 - 79: OOO0o0o - II1iI + OOO0o0o . i111I
def ii1III11 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oOoO = [ ]
 for iIi1IIIi1 in i1i :
  I1ii1 = iIi1IIIi1 [ 0 ]
  ooo0O0o00O = iIi1IIIi1 [ 1 ]
  iiI111I1iIiI = iIi1IIIi1 [ 2 ]
  O00Oo0o0000OOoO = '[COLOR gold]%s[/COLOR] (%s)' % ( ooo0O0o00O , iiI111I1iIiI )
  oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
  I1I = '{0}?action=grupo2&idgru={1}' . format ( Oo , I1ii1 )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 7 - 7: OOo000 % Iii1I1 . oO0o + I11i11Ii - II1iI
def o0o0O00oo0 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 if 27 - 27: i11iIiiIii % ooO0OO000o % II1iI . Iii1I1 - Ii11111i + oO0o
 if 57 - 57: OO0O0O / II1iI - ii1I
 if 51 - 51: O0
 O00O0oOO00O00 . execute ( "SELECT pais, Count(id) FROM pelis group by pais order by repe,pais;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oOoO = [ ]
 for iIi1IIIi1 in i1i :
  ii11I1 = iIi1IIIi1 [ 0 ]
  iiI111I1iIiI = iIi1IIIi1 [ 1 ]
  oO0oo = base64 . urlsafe_b64encode ( ii11I1 . encode ( 'utf-8' ) )
  if ii11I1 . encode ( 'utf-8' ) == 'España' :
   ii11I1 = 'ESPAÑA' . decode ( 'utf-8' )
  O00Oo0o0000OOoO = '[COLOR gold]%s[/COLOR] (%s)' % ( ii11I1 , iiI111I1iIiI )
  oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
  I1I = '{0}?action=pais2&pais={1}' . format ( Oo , oO0oo )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 38 - 38: iiiii * i1iiIII111ii % Iii1I1 * oO0o
def IIiiI ( ) :
 III1i11 = ii11i ( )
 if III1i11 :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  III1i11 = OO0o ( unicode ( III1i11 . decode ( 'utf-8' ) ) ) . upper ( )
  III1i11 = '%' + III1i11 + '%'
  O00O0oOO00O00 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru WHERE grupo2 like ? GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" , ( III1i11 , ) )
  i1i = O00O0oOO00O00 . fetchall ( )
  O0o0O00Oo0o0 . close ( )
  oOoO = [ ]
  for iIi1IIIi1 in i1i :
   I1ii1 = iIi1IIIi1 [ 0 ]
   ooo0O0o00O = iIi1IIIi1 [ 1 ]
   iiI111I1iIiI = iIi1IIIi1 [ 2 ]
   O00Oo0o0000OOoO = '[COLOR gold]%s[/COLOR] (%s)' % ( ooo0O0o00O , iiI111I1iIiI )
   oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
   I1I = '{0}?action=grupo2&idgru={1}' . format ( Oo , I1ii1 )
   i1II1 = True
   oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
  xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 25 - 25: iiI1i1
def i11iI11iIiIi ( idgru ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN pelgru ON pelis.ID = pelgru.idpel WHERE pelgru.idgru=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( idgru , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , True )
 if 100 - 100: oOOOO . OOO0o0o * Ii11111i % Iii1I1 * Iii1I1
def IIIii1 ( pais ) :
 pais = base64 . b64decode ( pais ) . decode ( 'utf-8' )
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis WHERE pais=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( pais , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , True )
 if 71 - 71: ooO0OO000o / ii1I . o0oO0 % iiiii . oO0o
def Iiiiii111i1ii ( ) :
 III1i11 = ii11i ( )
 if III1i11 :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  III1i11 = OO0o ( unicode ( III1i11 . decode ( 'utf-8' ) ) ) . upper ( )
  III1i11 = '%' + III1i11 + '%'
  O00O0oOO00O00 . execute ( "Select * from pelis where grupo like ? order by grupo" , ( III1i11 , ) )
  i1i = O00O0oOO00O00 . fetchall ( )
  O0o0O00Oo0o0 . close ( )
  II1I1Ii ( i1i )
  if 25 - 25: O0Oo0oO0o - i1iiIII111ii / i11iIiiIii
def iiI1ii11i1 ( ) :
 III1i11 = ii11i ( )
 if III1i11 :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  III1i11 = OO0o ( unicode ( III1i11 . decode ( 'utf-8' ) ) ) . upper ( )
  III1i11 = '%' + III1i11 + '%'
  O00O0oOO00O00 . execute ( "Select director, count(id) from pelis group by director having director2 like ? order by director2" , ( III1i11 , ) )
  i1i = O00O0oOO00O00 . fetchall ( )
  O0o0O00Oo0o0 . close ( )
  oOoO = [ ]
  for iIi1IIIi1 in i1i :
   iI1i11 = iIi1IIIi1 [ 0 ] . encode ( 'utf-8' )
   iiI111I1iIiI = iIi1IIIi1 [ 1 ]
   O00Oo0o0000OOoO = '[COLOR gold]%s[/COLOR] (%s)' % ( iI1i11 , iiI111I1iIiI )
   oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
   I1I = '{0}?action=busdir2&director={1}' . format ( Oo , iI1i11 )
   i1II1 = True
   oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
  xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 38 - 38: o0oO0 - OOo000 / Iii1I1 . oOOOO
def i1iiIiI1Ii1i ( director ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select * from pelis where director = ? order by anno, grupo, id" , ( director . decode ( 'utf-8' ) , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , True )
 if 22 - 22: O0 / i11iIiiIii
def oOOoo ( ) :
 III1i11 = ii11i ( )
 if III1i11 :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  III1i11 = OO0o ( unicode ( III1i11 . decode ( 'utf-8' ) ) ) . upper ( )
  III1i11 = '%' + III1i11 + '%'
  O00O0oOO00O00 . execute ( "SELECT actores.id, actor, Count(idact) FROM actores INNER JOIN pelact ON actores.id = pelact.idact GROUP BY actores.actor having actor2 like ? ORDER BY actor2" , ( III1i11 , ) )
  i1i = O00O0oOO00O00 . fetchall ( )
  O0o0O00Oo0o0 . close ( )
  oOoO = [ ]
  for iIi1IIIi1 in i1i :
   iII1111III1I = iIi1IIIi1 [ 0 ]
   oOooo0 = iIi1IIIi1 [ 1 ]
   iiI111I1iIiI = iIi1IIIi1 [ 2 ]
   O00Oo0o0000OOoO = '[COLOR gold]%s[/COLOR] (%s)' % ( oOooo0 , iiI111I1iIiI )
   oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
   I1I = '{0}?action=busact2&idact={1}' . format ( Oo , iII1111III1I )
   i1II1 = True
   oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
  xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 39 - 39: ii1I / O0
def oO000oOo00o0o ( idact ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN pelact ON pelis.ID = pelact.idpel WHERE pelact.idact=? ORDER BY pelis.anno, pelis.grupo, pelis.id;" , ( idact , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , True )
 if 85 - 85: OOo000 + iiiii * OOo000 - oOOOO % i11iIiiIii
def OOo00OoO ( ) :
 import datetime
 i1IiIII111i1 = datetime . datetime . now ( ) . year
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis where gb is not null and anno>=? order by gb, HD LIMIT(100);" , ( i1IiIII111i1 - 1 , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , False )
 if 10 - 10: OOO0o0o / i11iIiiIii
def o00 ( ) :
 import datetime
 i1IiIII111i1 = datetime . datetime . now ( ) . year
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis where gb is not null and anno<? order by gb, HD LIMIT(100);" , ( i1IiIII111i1 - 1 , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , False )
 if 85 - 85: o0oO0 . oOOOO
def O0O0Ooooo000 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 if 65 - 65: O0Oo0oO0o * oOOOO
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis where vta>0 order by vta DESC,HD;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , False , mvta = True )
 if 79 - 79: iiiii - I11i11Ii
def o00O00oO00 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 if 23 - 23: OO0O0O * ii1I % iiiii * O0
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis where gb2>0 order by gb2, server;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , False )
 if 9 - 9: O0 - ooO0OO000o + Iii1I1 / OO0O0O / i11iIiiIii
def I1IIIiI1I1ii1 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select id,genero from generos order by genero2;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 oOoO = [ ]
 O00Oo0o0000OOoO = '[COLOR gold]*** GÉNEROS ***[/COLOR]'
 oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
 i1II1 = False
 oOoO . append ( ( '' , oOOOOoOO0o , i1II1 ) )
 for iIi1IIIi1 in i1i :
  I1ii1 = iIi1IIIi1 [ 0 ]
  ooo0O0o00O = iIi1IIIi1 [ 1 ]
  oOOOOoOO0o = xbmcgui . ListItem ( label = ooo0O0o00O , iconImage = '' )
  I1I = '{0}?action=TopGen&idgen={1}' . format ( Oo , I1ii1 )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 O00O0oOO00O00 . execute ( "Select id,tema from temas order by tema2;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O00Oo0o0000OOoO = '[COLOR gold]*** TEMAS ***[/COLOR]'
 oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
 i1II1 = False
 oOoO . append ( ( '' , oOOOOoOO0o , i1II1 ) )
 for iIi1IIIi1 in i1i :
  I1ii1 = iIi1IIIi1 [ 0 ]
  ooo0O0o00O = iIi1IIIi1 [ 1 ]
  oOOOOoOO0o = xbmcgui . ListItem ( label = ooo0O0o00O , iconImage = '' )
  I1I = '{0}?action=TopTem&idtem={1}' . format ( Oo , I1ii1 )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 O0o0O00Oo0o0 . close ( )
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 30 - 30: Iii1I1 * iiiii
def I1iIIIi1 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select id,genero from generos order by genero2;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oOoO = [ ]
 O00Oo0o0000OOoO = '[COLOR gold]Selecciona un género[/COLOR]'
 oOOOOoOO0o = xbmcgui . ListItem ( label = O00Oo0o0000OOoO , iconImage = '' )
 i1II1 = False
 oOoO . append ( ( '' , oOOOOoOO0o , i1II1 ) )
 for iIi1IIIi1 in i1i :
  I1ii1 = iIi1IIIi1 [ 0 ]
  ooo0O0o00O = iIi1IIIi1 [ 1 ]
  oOOOOoOO0o = xbmcgui . ListItem ( label = ooo0O0o00O , iconImage = '' )
  I1I = '{0}?action=pelrec2&idgen={1}' . format ( Oo , I1ii1 )
  i1II1 = True
  oOoO . append ( ( I1I , oOOOOoOO0o , i1II1 ) )
 xbmcplugin . addDirectoryItems ( o0O , oOoO , len ( oOoO ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 17 - 17: OO0O0O . iiiii / II1iI % ooO0OO000o % ii1I / i11iIiiIii
def OOOIiiiii1iI ( idgen ) :
 IIi = sqlite3 . connect ( IiI )
 ooOooo0 = IIi . cursor ( )
 ooOooo0 . execute ( 'CREATE TABLE IF NOT EXISTS "vtas" (`id` INTEGER NOT NULL, `faffid` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 if 67 - 67: I11i11Ii
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( 'CREATE TABLE IF NOT EXISTS "reko" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 O00O0oOO00O00 . execute ( 'delete from reko;' )
 O0o0O00Oo0o0 . commit ( )
 O00O0oOO00O00 . execute ( "SELECT pelis.id,faffid,grupo FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelis.valoracion>6.5 and pelgen.idgen=? ORDER BY pelis.id;" , ( idgen , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 OO00OO0O0 = [ ]
 Oo0oOOo = [ ]
 i1I111Ii1i11 = len ( i1i ) - 1
 from random import randint
 while 1 == 1 :
  o0O0O0o = randint ( 0 , i1I111Ii1i11 )
  if o0O0O0o not in Oo0oOOo :
   Oo0oOOo . append ( o0O0O0o )
   iIi1IIIi1 = i1i [ o0O0O0o ]
   OOiI11I = iIi1IIIi1 [ 1 ]
   ooOooo0 . execute ( "SELECT id from vtas where faffid=?;" , ( OOiI11I , ) )
   ooO000 = ooOooo0 . fetchone ( )
   if not ooO000 :
    ooOooo0 . execute ( "INSERT INTO vtas(faffid) VALUES (?);" , ( OOiI11I , ) )
    IIi . commit ( )
    oOOOOIi = { }
    oOOOOIi [ 'grupo' ] = iIi1IIIi1 [ 2 ]
    oOOOOIi [ 'id' ] = iIi1IIIi1 [ 0 ]
    OO00OO0O0 . append ( oOOOOIi )
    if len ( OO00OO0O0 ) == 10 :
     break
   if len ( Oo0oOOo ) > i1I111Ii1i11 :
    ooOooo0 . execute ( "DELETE FROM vtas;" )
    IIi . commit ( )
    break
 IIi . close ( )
 OO00OO0O0 . sort ( key = lambda Ii1ii111i1 : Ii1ii111i1 [ 'grupo' ] )
 II1I1iiIII = [ ]
 for oOOOOIi in OO00OO0O0 :
  O00O0oOO00O00 . execute ( 'INSERT INTO reko(idpel) VALUES (?);' , ( oOOOOIi [ 'id' ] , ) )
  II1I1iiIII . append ( str ( oOOOOIi [ 'id' ] ) )
 II1I1iiIII = '_%s' % '.' . join ( II1I1iiIII )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN reko ON pelis.ID = reko.idpel ORDER BY reko.id;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O00O0oOO00O00 . execute ( 'delete from reko;' )
 O0o0O00Oo0o0 . commit ( )
 O0o0O00Oo0o0 . close ( )
 II1I1Ii ( i1i , False , II1I1iiIII )
 if 31 - 31: O0Oo0oO0o + Iii1I1
def oO0oOOoo00000 ( idgen ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 O0o0O00Oo0o0 . commit ( )
 O00O0oOO00O00 . execute ( 'select idpel from reco order by id;' )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 if i1i :
  oOo00 = [ ]
  for iIi1IIIi1 in i1i :
   oOo00 . append ( str ( iIi1IIIi1 [ 0 ] ) )
  oOo00 = '_%s' % '.' . join ( oOo00 )
  if 3 - 3: OOo000 % ii1I
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN reco ON pelis.ID = reco.idpel ORDER BY reco.id;" )
  i1i = O00O0oOO00O00 . fetchall ( )
  O00O0oOO00O00 . execute ( 'delete from reco;' )
  O0o0O00Oo0o0 . commit ( )
  O0o0O00Oo0o0 . close ( )
  II1I1Ii ( i1i , False , oOo00 )
 else :
  OOOIiiiii1iI ( idgen )
  if 46 - 46: ooO0OO000o % OOO0o0o % OO0O0O - Ii11111i . iiiii - O0
def o00ooO00O ( paramstring ) :
 oo00o0 = dict ( parse_qsl ( paramstring ) )
 if oo00o0 :
  if oo00o0 [ 'action' ] == 'genero' :
   iiiI ( )
  if oo00o0 [ 'action' ] == 'genero2' :
   IiIii1i111 ( oo00o0 [ 'idgen' ] )
  if oo00o0 [ 'action' ] == 'tema' :
   Ii1 ( )
  if oo00o0 [ 'action' ] == 'tema2' :
   o00oo0 ( oo00o0 [ 'idtem' ] )
  elif oo00o0 [ 'action' ] == 'anno' :
   O000OoOO0 ( )
  elif oo00o0 [ 'action' ] == 'shlnk' :
   IiIIIi1iIi ( oo00o0 [ 'server' ] , oo00o0 [ 'user' ] , oo00o0 [ 'cole' ] , oo00o0 [ 'peli' ] , oo00o0 [ 'last' ] )
  elif oo00o0 [ 'action' ] == 'anno2' :
   ii ( oo00o0 [ 'anno' ] )
  elif oo00o0 [ 'action' ] == 'grupo' :
   ii1III11 ( )
  elif oo00o0 [ 'action' ] == 'grupo2' :
   i11iI11iIiIi ( oo00o0 [ 'idgru' ] )
  elif oo00o0 [ 'action' ] == 'pais' :
   o0o0O00oo0 ( )
  elif oo00o0 [ 'action' ] == 'pais2' :
   IIIii1 ( oo00o0 [ 'pais' ] )
  elif oo00o0 [ 'action' ] == 'bustit' :
   Iiiiii111i1ii ( )
  elif oo00o0 [ 'action' ] == 'busdir' :
   iiI1ii11i1 ( )
  elif oo00o0 [ 'action' ] == 'busdir2' :
   i1iiIiI1Ii1i ( oo00o0 [ 'director' ] )
  elif oo00o0 [ 'action' ] == 'busact' :
   oOOoo ( )
  elif oo00o0 [ 'action' ] == 'busact2' :
   oO000oOo00o0o ( oo00o0 [ 'idact' ] )
  elif oo00o0 [ 'action' ] == 'busgru' :
   IIiiI ( )
  elif oo00o0 [ 'action' ] == 'ultim' :
   OOo00OoO ( )
  elif oo00o0 [ 'action' ] == 'ultim2' :
   o00 ( )
  elif oo00o0 [ 'action' ] == 'ulthd' :
   o00O00oO00 ( )
  elif oo00o0 [ 'action' ] == 'mvtas' :
   O0O0Ooooo000 ( )
  elif oo00o0 [ 'action' ] == 'pelrec' :
   I1iIIIi1 ( )
  elif oo00o0 [ 'action' ] == 'pelrec2' :
   oO0oOOoo00000 ( oo00o0 [ 'idgen' ] )
  elif oo00o0 [ 'action' ] == 'peltop' :
   I1IIIiI1I1ii1 ( )
  elif oo00o0 [ 'action' ] == 'TopGen' :
   i11IIIiIiIi ( oo00o0 [ 'idgen' ] )
  elif oo00o0 [ 'action' ] == 'TopTem' :
   iIi1i1iIi1iI ( oo00o0 [ 'idtem' ] )
  elif oo00o0 [ 'action' ] == 'play' :
   O00o0OO0 ( oo00o0 [ 'server' ] , oo00o0 [ 'user' ] , oo00o0 [ 'cole' ] , oo00o0 [ 'peli' ] , oo00o0 [ 'id' ] , oo00o0 [ 'tit' ] )
 else :
  IiI1iIiIIIii ( )
  if 65 - 65: ooO0OO000o . I11i11Ii % i111I * iiI1i1
if __name__ == '__main__' :
 IiiIII111iI = sys . argv [ 2 ] [ 1 : ]
 o00ooO00O ( sys . argv [ 2 ] [ 1 : ] )
 if 38 - 38: oO0o / OOo000 % Ii11111i
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')